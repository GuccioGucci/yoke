#!/usr/bin/env bash

#defaults
COMMAND=
CLUSTER=
SERVICE=
VALUES=
IMAGE_TAG=
WORKING_DIR="deployment"
DEBUG="false"
PRUNE_TASK_DEFINITIONS=
TIMEOUT="300"
DRY_RUN="false"

CURRENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
PATH="$PATH:$CURRENT_DIR/lib/bin:$PATH:$CURRENT_DIR/lib/ecs-deploy:$CURRENT_DIR/lib/gucci"

# functions

function show_usage() {
    cat << EOL
usage: $0 command [parameters]

command:
    update                  update remote task definition with given image tag
    install                 install local task definition (task-definition.json.tmpl), using given image tag

parameters:
    -h|--help               show this usage
    -v|--version            show version info
    -d|--debug              debug mode, verbose (default: $DEBUG)
    -c|--cluster value      ecs cluster (eg: cls01)
    -s|--service value      ecs service (eg: hello-world-dev)
    -t|--tag value          Docker image tag (eg: 1ab2c3-12)
    -w|--working-dir value  where to search for resources (default: $WORKING_DIR)
    -f|--values value       values file (eg: values-dev.yaml)
    --prune value           only keep given task definitions (eg: 5)
    --timeout value         timeout (default: $TIMEOUT)
    --dry-run               dry-run mode, avoid any deployment (default: $DRY_RUN)
EOL
}

function show_version() {
    [[ "$DEBUG" != "false" ]] && log "showing version"
    echo "(templating) gucci: $( gucci --version )"
    echo "(deployment) ecs-deploy: $( ecs-deploy --version )"
}

function log() {
    echo -e "[$( date "+%Y-%m-%d %H:%M:%S" )] $@"
}

function template_on() {
    local target="$1" ; shift
    [[ "$DEBUG" != "false" ]] && log "[template] executing ($# params): gucci $@"
    ( cd "$( realpath "$WORKING_DIR" )" ; execute_within_context gucci "$@" > "$target" )
}

function deployment_PATH() {
    echo "$WORKING_DIR/bin"
}

function execute() {
    local command_line="$@"
    [[ "$DRY_RUN" != "false" ]] && log "dry-run, skipping $command_line" || execute_within_context "$command_line"
}

function execute_within_context() {
    ECS_CLUSTER=$CLUSTER ECS_SERVICE=$SERVICE ECS_IMAGE_TAG=$IMAGE_TAG "$@"
}

function init_values() {
    if [[ ! -z "$VALUES" ]]; then
        VALUES="$( realpath $WORKING_DIR/$VALUES )"
        log "values: $VALUES"
    fi
}

function init_resource() {
    local name="$1"
    local folder="$2"

    local script="$( echo $( variable_get $name ) | sed 's/.tmpl//g' )"
    realpath "$folder/$( variable_get $name )" > /dev/null 2>&1 \
        && variable_set "$( realpath $folder/$( variable_get $name ) )" "$name"

    if [[ -f "$( variable_get $name )" ]]; then
        log "(template) $name: $( variable_get $name )"
        [[ "$DEBUG" != "false" ]] && log "$( cat "$( variable_get $name )" )"

        local command_line=()
        local original_value="$( variable_get $name )"

        variable_set "/tmp/$script.$RANDOM" "$name"
        log "(current) $name: $( variable_get $name )"

        if [[ ! -z "$VALUES" ]]; then
            command_line+=("-f" "$VALUES")
        fi

        template_on "$( variable_get $name )" "${command_line[@]}" "$original_value" || {
            log "cannot prepare $name";
            exit 1;
        }
        [[ "$DEBUG" != "false" ]] && log "$( cat "$( variable_get $name )" )"

        chmod +x "$( variable_get $name )"
    fi
}

function flags_install() {
    local flags="--task-definition-file $TASK_DEFINITION"
    [[ -f $TASK_SET ]] && flags="$flags --task-set-file $TASK_SET"
    echo "$flags"
}

function flags_confirmation() {
    [[ -f "$LIFECYCLE_CONFIRMATION" ]] \
        && echo "--canary-confirmation $LIFECYCLE_CONFIRMATION" \
        || echo "--canary-confirmation wait_timeout"
}

function variable_set() {
    local value=$1
    local key=$2
    eval "$key='$value'"   # 'declare -g' unsupported on bash < 4.2
}

function variable_get() {
    local key=$1
    echo "${!key}"
}

function on_pre_deploy() {
    local action="$LIFECYCLE_PRE"
    if [[ -f "$action" ]]; then
        log "[pre-deploy] executing $action";
        execute $action

        local action_result=$?
        [[ $action_result -eq 0 ]] || {
            log "[pre-deploy] could not execute"; exit $action_result;
        }
    else
        [[ "$DEBUG" != "false" ]] && log "[pre-deploy] skipping, not set";
    fi
    return 0
}

function on_post_deploy() {
    local action="$LIFECYCLE_POST"
    if [[ -f "$action" ]]; then
        log "[post-deploy] executing $action";
        execute $action

        local action_result=$?
        [[ $action_result -eq 0 ]] || {
            log "[post-deploy] could not execute"; exit $action_result;
        }
    else
        [[ "$DEBUG" != "false" ]] && log "[post-deploy] skipping, not set";
    fi
    return 0
}

function do_initialize() {    
    # enrich PATH with shared and deployment binaries
    PATH="$CURRENT_DIR/bin/helpers:$PATH"
    realpath $( deployment_PATH ) > /dev/null 2>&1 && PATH="$( realpath $( deployment_PATH ) ):$PATH"

    [[ "$DEBUG" != "false" ]] && {
        log "PATH: $PATH";
        log "dry-run: $DRY_RUN"
    }

    # mandatory command
    [[ -z "$COMMAND" ]] && { echo "no command provided" ; show_usage ; exit 1; }
    [[ "$COMMAND" != "update" && "$COMMAND" != "install" ]] && { echo "unsupported command" ; show_usage ; exit 1; }
    
    # mandatory parameters
    [[ -z "$CLUSTER" ]] && { echo "no cluster provided" ; show_usage ; exit 1; }
    [[ -z "$SERVICE" ]] && { echo "no service provided" ; show_usage ; exit 1; }
    [[ -z "$IMAGE_TAG" ]] && { echo "no image provided" ; show_usage ; exit 1; }
    
    # shared initialization
    init_values
    
    # install-specific resources
    if [[ "$COMMAND" == "install" ]]; then
      init_resource TASK_DEFINITION "$WORKING_DIR"
      init_resource TASK_SET "$WORKING_DIR"
    fi
    
    # additional resources
    init_resource LIFECYCLE_PRE "$( deployment_PATH )"
    init_resource LIFECYCLE_CONFIRMATION "$( deployment_PATH )"
    init_resource LIFECYCLE_POST "$( deployment_PATH )"
}

function do_deploy() {
    local command_line=()
    [[ "$COMMAND" == "update" ]] && command_line=("-c" "$CLUSTER" "-n" "$SERVICE" "--tag-only" "$IMAGE_TAG" "-i" "ignored-image" $( flags_confirmation ) "--timeout" "$TIMEOUT")
    [[ "$COMMAND" == "install" ]] && command_line=("-c" "$CLUSTER" "-n" "$SERVICE" "--tag-only" "$IMAGE_TAG" "-i" "ignored-image" $( flags_install ) $( flags_confirmation ) "--timeout" "$TIMEOUT")
    [[ ! -z "$PRUNE_TASK_DEFINITIONS" ]] && command_line+=("--max-definitions" "$PRUNE_TASK_DEFINITIONS")
    [[ "$DRY_RUN" != "false" ]] && command_line+=("--dry-run")
    [[ "$DEBUG" != "false" ]] && command_line+=("--verbose")

    [[ "$DEBUG" != "false" ]] && log "[deploy] executing (${#command_line[@]} params): ecs-deploy ${command_line[@]}"
    ecs-deploy ${command_line[@]}

    local ecs_deploy_result=$?
    [[ $ecs_deploy_result -eq 0 ]] || {
        log "could not deploy"; exit $ecs_deploy_result;
    }
}

# skip when sourcing the script
if [ "$0" = "$BASH_SOURCE" ] ; then

    variable_set task-definition.json.tmpl TASK_DEFINITION
    variable_set task-set.json.tmpl TASK_SET
    variable_set pre.sh.tmpl LIFECYCLE_PRE
    variable_set confirm.sh.tmpl LIFECYCLE_CONFIRMATION
    variable_set post.sh.tmpl LIFECYCLE_POST

    # main
    "$CURRENT_DIR"/bin/install --app

    [[ $# -eq 0 ]] && show_usage && exit 1
    while [[ $# -gt 0 ]]; do
        key="$1"
        case $key in
            -w|--working-dir)
            WORKING_DIR="$2"
            shift 2
            ;;
            -c|--cluster)
            CLUSTER="$2"
            shift 2
            ;;
            -s|--service)
            SERVICE="$2"
            shift 2
            ;;
            -t|--tag)
            IMAGE_TAG="$2"
            shift 2
            ;;
            -f|--values)
            VALUES="$2"
            shift 2
            ;;
            --prune)
            PRUNE_TASK_DEFINITIONS="$2"
            shift 2
            ;;
            --timeout)
            TIMEOUT="$2"
            shift 2
            ;;
            -d|--debug)
            DEBUG="true"
            shift 1
            ;;
            --dry-run)
            DRY_RUN="true"
            shift 1
            ;;
            -v|--version)
            show_version ; exit 0
            ;;
            -h|--help)
            show_usage ; exit 0
            ;;
            -*|--*)
            show_usage ; exit 1
            ;;
            *)
            COMMAND="$1"
            shift 1
            ;;
        esac
    done

    do_initialize
    on_pre_deploy
    do_deploy
    on_post_deploy
fi