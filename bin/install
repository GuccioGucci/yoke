#!/usr/bin/env bash

CURRENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

function fail() {
    local message="$*"
    echo "$message" ; exit 1
}

function ensure() {
    local name="$1"
    local description="${2:-$name}"
    command -v $name > /dev/null 2>&1 || fail "Please, install $description"
}

function artifact_for() {
    local name="$1"
    local version="$2"
    
    local arch="amd64"
    # detect OS
    local os=$( uname -s | tr '[:upper:]' '[:lower:]' )
    local extension=""
    [[ $os =~ "_nt" ]] && {
        os="windows";
        extension=".exe"
    }

    echo "${name}-v${version}-${os}-${arch}${extension}"
}

function link_as() {
    local name=$1
    local binary="$2"

    echo "Linking $( echo "$binary" | sed 's|'"$LIB_DIR"'/||g' ) as $name"
    [[ -f "$binary" ]] && chmod +x "$binary";
    ln -s -f "$binary" "$BIN_DIR"/$name;
}


function install_github_tag() {
    local repo="$1"
    local version="$2"
    
    local name="$( echo $repo | cut -d "/" -f 2 )"
    local artifact="$version.tar.gz"
        
    local target="$name-$( echo $version | sed 's/v//g' )" # eg: 'v0.4.0' => '0.4.0'
    [[ -d "$LIB_DIR/$target" ]] || {
        echo "Installing $repo $version ($target)"
        ( cd "$LIB_DIR" ; curl -s -L "https://github.com/$repo/archive/refs/tags/$artifact" -o $name-$artifact ; tar -xf $name-$artifact )
        ( cd "$LIB_DIR" ; [[ -f $name-$artifact ]] && rm -rf $name-$artifact ) # remove downloaded artifact

    
        # looking for binaries, multiple attempts
        # - in root folder: no extension, .sh extension
        # - under bin folder: no extension
        # - root folder itself
        local binary=""
        [[ -z "$binary" ]] && { binary="$LIB_DIR/$target/$name" ; [[ -r "$binary" ]] || binary=""; }
        [[ -z "$binary" ]] && { binary="$LIB_DIR/$target/bin/$name" ; [[ -r "$binary" ]] || binary=""; }
        [[ -z "$binary" ]] && { [[ -f "$LIB_DIR/$target"/load.bash ]] && binary="$LIB_DIR/$target"; [[ -r "$binary" ]] || binary=""; }
        [[ -z "$binary" ]] && { binary=("$LIB_DIR/$target"/$name*.sh) ; [[ -r "${binary[0]}" ]] || binary=""; }
        
        # if found, link to $BIN_DIR
        [[ -z "$binary" ]] || {
            if [[ "$(declare -p binary)" =~ "declare -a" ]]; then
                for each in "${binary[@]}"; do link_as $( basename "$each" ) "$each" ; done
            else
                link_as "$name" "$binary"
            fi
        }
    }
}

function install_github_release() {
    local repo="$1"
    local version="$2"

    local name="$( echo $repo | cut -d "/" -f 2 )"
    local artifact=$( artifact_for $name $version )

    local target="$LIB_DIR/$name-$version"
    [[ -d "$target" ]] || {
        echo "Installing $repo $version ($artifact)"

        mkdir -p "$target"
        ( cd "$target" ; curl "https://github.com/$repo/releases/download/$version/$artifact" -s -L -o $artifact )

        local binary="$target/$artifact"
        [[ -f "$binary" ]] || fail "Could not update $name"

        echo "Linking $( echo "$binary" | sed 's|'"$LIB_DIR"'/||g' )"
        chmod +x "$binary"
        ln -s -f "$binary" "$BIN_DIR"/$name
    }
}

SCOPE="--all"
if [ $# -eq 1 ]; then
    SCOPE="$1"
fi

# required dependencies
ensure "aws" "aws (version 2)"
ensure "jq"
ensure "realpath" "coreutils"
ensure "curl"

# init context
LIB_DIR=$( realpath "$CURRENT_DIR"/../lib )
BIN_DIR="$LIB_DIR"/bin

# prepare bin folder
mkdir -p "$BIN_DIR" > /dev/null 2>&1

[[ $SCOPE == "--all" || $SCOPE == "--app" ]] && {
    # application tools
    install_github_tag GuccioGucci/ecs-deploy 3.10.0.10
    install_github_release noqcks/gucci 1.5.5
}

[[ $SCOPE == "--all" || $SCOPE == "--test" ]] && {
    # test libraries
    install_github_tag sstephenson/bats v0.4.0
    install_github_tag ztombol/bats-assert v0.3.0
    install_github_tag ztombol/bats-support v0.3.0
}

[[ $SCOPE == "--all" || $SCOPE == "--dist" ]] && {
    # dist libraries
    install_github_tag megastep/makeself release-2.4.3 # last working on MacOS
}

# Done
exit 0
