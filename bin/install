#!/usr/bin/env bash

CURRENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

LIB_DIR=$( realpath $CURRENT_DIR/../lib )
BIN_DIR=$LIB_DIR/bin

function fail() {
    local message="$*"
    echo "$message" ; exit 1
}

function install_github_tag() {
    local repo="$1"
    local version="$2"
    
    local name="$( echo $repo | cut -d "/" -f 2 )"
    local artifact="$version.tar.gz"
        
    local target=$name-$( echo $version | sed 's/v//g' ) # eg: 'v0.4.0' => '0.4.0'
    [[ -d $LIB_DIR/$target ]] || {
        echo "Installing $repo $version ($target)"
        ( cd $LIB_DIR ; curl -s -L "https://github.com/$repo/archive/refs/tags/$artifact" -o $name-$artifact ; tar -xf $name-$artifact )
        ( cd $LIB_DIR ; [[ -f $name-$artifact ]] && rm -rf $name-$artifact ) # remove downloaded artifact

        local binary=$LIB_DIR/$target/$name # in root folder
        [[ -f $binary ]] || {
            binary=$LIB_DIR/$target/bin/$name; # under bin folder
            [[ -f $binary ]] || {
                [[ -f $LIB_DIR/$target/load.bash ]] && binary=$LIB_DIR/$target; # root folder itself
                [[ -d $binary ]] || binary=""; # mark as not found
            }
        }
        
        [[ -z "$binary" ]] || {
            echo "Linking $( echo $binary | sed 's|'$LIB_DIR'/||g' )"
            [[ -f $binary ]] && chmod +x $binary;
            ln -s -f $binary $BIN_DIR/$name;
        }
    }
}

function install_gucci() {
    local version="$1"
    local repo="noqcks/gucci"

    local name="$( echo $repo | cut -d "/" -f 2 )"
    OS_LABEL=$( uname -s | tr '[:upper:]' '[:lower:]' )
    if [[ $OS_LABEL =~ "_nt" ]]; then
        local artifact="$name-v$version-windows-amd64.exe"
    else
        local artifact="$name-v$version-$OS_LABEL-amd64"
    fi

    local target=$LIB_DIR/$name-$version
    local binary=$target/$artifact
    
    [[ -d $target ]] || {
        echo "Installing $repo $version ($artifact)"

        mkdir -p $target
        ( cd $target ; curl "https://github.com/$repo/releases/download/$version/$artifact" -s -L -o $artifact )
        [[ -f $target/$artifact ]] || fail "Could not update $name"

        chmod +x $binary
        ln -s -f $binary $BIN_DIR/$name
    }
}

SCOPE="--all"
if [ $# -eq 1 ]; then
    SCOPE="$1"
fi

# prepare bin folder
mkdir -p $BIN_DIR > /dev/null 2>&1

[[ $SCOPE == "--all" || $SCOPE == "--app" ]] && {
    # required dependencies
    command -v "aws" > /dev/null 2>&1 || fail "Please, install aws (version 2)"
    command -v "jq" > /dev/null 2>&1 || fail "Please, install jq"
    command -v "realpath" > /dev/null 2>&1 || fail "Please, install coreutils"
    command -v "curl" > /dev/null 2>&1 || fail "Please, install curl"
    
    # application tools
    install_github_tag GuccioGucci/ecs-deploy 3.10.3
    install_gucci 1.5.2
}

[[ $SCOPE == "--all" || $SCOPE == "--test" ]] && {
    # test libraries
    install_github_tag sstephenson/bats v0.4.0
    install_github_tag ztombol/bats-assert v0.3.0
    install_github_tag ztombol/bats-support v0.3.0
}