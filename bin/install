#!/usr/bin/env bash

CURRENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

LIB_DIR=$( realpath $CURRENT_DIR/../lib )
BIN_DIR=$LIB_DIR/bin

function fail() {
    local message="$*"
    echo "$message" ; exit 1
}

function install_ecs_deploy() {
    local version="$1"
    local repo="GuccioGucci/ecs-deploy"
    
    local name="$( echo $repo | cut -d "/" -f 2 )"
    local artifact="$version.tar.gz"
        
    local target=$LIB_DIR/$name-$version
    local binary=$target/$name

    [[ -d $target ]] || {
        echo "Installing $repo $version"
    
        ( cd $LIB_DIR ; curl -s -L "https://github.com/$repo/archive/refs/tags/$artifact" | tar -xz )
        [[ -f $binary ]] || fail "Could not install $name"

        chmod +x $binary
        ln -s -f $binary $BIN_DIR/$name
    }
}

function install_gucci() {
    local version="$1"
    local repo="noqcks/gucci"

    local name="$( echo $repo | cut -d "/" -f 2 )"
    OS_LABEL=$( uname -s | tr '[:upper:]' '[:lower:]' )
    if [[ $OS_LABEL =~ "_nt" ]]; then
        local artifact="$name-v$version-windows-amd64.exe"
    else
        local artifact="$name-v$version-$OS_LABEL-amd64"
    fi

    local target=$LIB_DIR/$name-$version
    local binary=$target/$artifact
    
    [[ -d $target ]] || {
        echo "Installing $repo $version ($artifact)"

        mkdir -p $target
        ( cd $target ; curl "https://github.com/$repo/releases/download/$version/$artifact" -s -L -o $artifact )
        [[ -f $target/$artifact ]] || fail "Could not update $name"

        chmod +x $binary
        ln -s -f $binary $BIN_DIR/$name
    }
}

function install_repo() {
    local repo="$1"
    local name="$( echo $repo | cut -d "/" -f 2 )"
    [[ -d $LIB_DIR/$name ]] || {
        echo "Installing $repo"
        git clone --quiet --depth 1 "https://github.com/$repo.git" $LIB_DIR/$name
    }
}

SCOPE="--all"
if [ $# -eq 1 ]; then
    SCOPE="$1"
fi

# prepare bin folder
mkdir -p $BIN_DIR > /dev/null 2>&1

[[ $SCOPE == "--all" || $SCOPE == "--app" ]] && {
    # required dependencies
    command -v "aws" > /dev/null 2>&1 || fail "Please, install aws (version 2)"
    command -v "jq" > /dev/null 2>&1 || fail "Please, install jq"
    command -v "realpath" > /dev/null 2>&1 || fail "Please, install coreutils"
    command -v "curl" > /dev/null 2>&1 || fail "Please, install curl"
    
    # application tools
    install_ecs_deploy 3.10.3
    install_gucci 1.5.2
}

[[ $SCOPE == "--all" || $SCOPE == "--test" ]] && {
    # required dependencies
    command -v "git" > /dev/null 2>&1 || fail "Please, install git"
    
    # test libraries
    install_repo sstephenson/bats
    install_repo ztombol/bats-assert
    install_repo ztombol/bats-support
}